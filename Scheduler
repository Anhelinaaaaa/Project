// Updated OptimizedOperationScheduler class
package one;

import java.io.Serializable;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * OptimizedOperationScheduler - Enhanced scheduler with efficient data structures
 * and algorithms for fast appointment scheduling and searching.
 */
public class OptimizedOperationScheduler implements Serializable {

    private Map<String, HealthProfessional> professionals;
    private Map<String, Diary> diaries;
    private Stack<Command> undoStack;
    private static final int MAX_UNDO_OPERATIONS = 50;

    public OptimizedOperationScheduler() {
        professionals = new HashMap<>();
        diaries = new HashMap<>();
        undoStack = new Stack<>();
    }

    // Health Professional Management

    public boolean addHealthProfessional(HealthProfessional professional) {
        if (professional == null || professionals.containsKey(professional.getName())) {
            return false;
        }
        professionals.put(professional.getName(), professional);
        diaries.put(professional.getName(), new Diary());
        recordUndo(new AddProfessionalCommand(professional.getName()));
        return true;
    }

    public boolean removeHealthProfessional(String name) {
        if (!professionals.containsKey(name)) {
            return false;
        }
        HealthProfessional removedProfessional = professionals.remove(name);
        Diary removedDiary = diaries.remove(name);
        recordUndo(new RemoveProfessionalCommand(removedProfessional, removedDiary));
        return true;
    }

    public boolean editHealthProfessional(String oldName, HealthProfessional newProfessional) {
        if (!professionals.containsKey(oldName) || newProfessional == null) {
            return false;
        }
        HealthProfessional oldProfessional = professionals.get(oldName);
        professionals.put(newProfessional.getName(), newProfessional);
        if (!oldName.equals(newProfessional.getName())) {
            Diary diary = diaries.remove(oldName);
            diaries.put(newProfessional.getName(), diary);
            professionals.remove(oldName);
        }
        recordUndo(new EditProfessionalCommand(oldName, oldProfessional, newProfessional));
        return true;
    }

    public Diary getDiary(String professionalName) {
        return diaries.get(professionalName);
    }

    // Appointment Scheduling

    public boolean scheduleAppointment(TimeSlot timeSlot, String patientName, String treatmentType, List<String> professionalNames) {
        List<Diary> involvedDiaries = new ArrayList<>();
        for (String name : professionalNames) {
            Diary diary = diaries.get(name);
            if (diary == null || diary.isOverlapping(new Appointment(
                    timeSlot.getStartTime().toLocalDate(),
                    timeSlot.getStartTime().toLocalTime(),
                    timeSlot.getEndTime().toLocalTime(),
                    treatmentType,
                    null))) {
                return false;
            }
            involvedDiaries.add(diary);
        }

        Appointment newAppointment = new Appointment(
                timeSlot.getStartTime().toLocalDate(),
                timeSlot.getStartTime().toLocalTime(),
                timeSlot.getEndTime().toLocalTime(),
                treatmentType,
                professionalNames.stream().map(professionals::get).collect(Collectors.toList())
        );

        for (Diary diary : involvedDiaries) {
            diary.addAppointment(newAppointment);
        }
        recordUndo(new ScheduleAppointmentCommand(newAppointment, professionalNames));
        return true;
    }

    public List<TimeSlot> findAvailableTimeSlots(List<String> professionalNames, LocalDate startDate, LocalDate endDate, Duration duration) {
        if (professionalNames.isEmpty() || startDate.isAfter(endDate)) {
            return Collections.emptyList();
        }

        List<Diary> involvedDiaries = professionalNames.stream()
                .map(diaries::get)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        List<TimeSlot> availableSlots = new ArrayList<>();
        LocalDate currentDate = startDate;
        while (!currentDate.isAfter(endDate)) {
            LocalTime currentTime = LocalTime.of(8, 0);
            while (currentTime.plus(duration).isBefore(LocalTime.of(17, 0))) {
                LocalDateTime start = LocalDateTime.of(currentDate, currentTime);
                LocalDateTime end = start.plus(duration);

                boolean allAvailable = involvedDiaries.stream()
                        .allMatch(diary -> !diary.isOverlapping(new Appointment(
                                currentDate,
                                currentTime,
                                end.toLocalTime(),
                                null,
                                null)));

                if (allAvailable) {
                    availableSlots.add(new TimeSlot(start, end));
                }
                currentTime = currentTime.plusMinutes(30);
            }
            currentDate = currentDate.plusDays(1);
        }
        return availableSlots;
    }

    public boolean undo() {
        if (undoStack.isEmpty()) {
            return false;
        }
        undoStack.pop().undo();
        return true;
    }

    private void recordUndo(Command command) {
        if (undoStack.size() >= MAX_UNDO_OPERATIONS) {
            undoStack.remove(0);
        }
        undoStack.push(command);
    }

    // Command Pattern Implementations

    private interface Command {
        void undo();
    }

    private class AddProfessionalCommand implements Command {
        private final String professionalName;

        public AddProfessionalCommand(String professionalName) {
            this.professionalName = professionalName;
        }

        @Override
        public void undo() {
            professionals.remove(professionalName);
            diaries.remove(professionalName);
        }
    }

    private class RemoveProfessionalCommand implements Command {
        private final HealthProfessional professional;
        private final Diary diary;

        public RemoveProfessionalCommand(HealthProfessional professional, Diary diary) {
            this.professional = professional;
            this.diary = diary;
        }

        @Override
        public void undo() {
            professionals.put(professional.getName(), professional);
            diaries.put(professional.getName(), diary);
        }
    }

    private class EditProfessionalCommand implements Command {
        private final String oldName;
        private final HealthProfessional oldProfessional;
        private final HealthProfessional newProfessional;

        public EditProfessionalCommand(String oldName, HealthProfessional oldProfessional, HealthProfessional newProfessional) {
            this.oldName = oldName;
            this.oldProfessional = oldProfessional;
            this.newProfessional = newProfessional;
        }

        @Override
        public void undo() {
            professionals.put(oldName, oldProfessional);
            if (!oldName.equals(newProfessional.getName())) {
                diaries.put(oldName, diaries.remove(newProfessional.getName()));
                professionals.remove(newProfessional.getName());
            }
        }
    }

    private class ScheduleAppointmentCommand implements Command {
        private final Appointment appointment;
        private final List<String> professionalNames;

        public ScheduleAppointmentCommand(Appointment appointment, List<String> professionalNames) {
            this.appointment = appointment;
            this.professionalNames = new ArrayList<>(professionalNames);
        }

        @Override
        public void undo() {
            for (String name : professionalNames) {
                Diary diary = diaries.get(name);
                if (diary != null) {
                    diary.removeAppointment(appointment);
                }
            }
        }
    }
}


